import { NextResponse } from 'next/server';
import { sql } from '@vercel/postgres';

const slugify = (title, tmdbId) => {
  return `${title}-${tmdbId}`
    .toString()
    .toLowerCase()
    .replace(/'/g, "")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");
};

const slugifyGenre = (genre) =>
  genre.toString().toLowerCase().replace(/[^a-z0-9]+/g, "").trim();

export async function POST(req) {
  try {
    const body = await req.json();

    const {
      film, // instead of title
      year,
      tmdb_id,
      director = "",
      screenwriters = "",
      producer = "", // singular
      studio = "",   // singular
      run_time = null,
      my_rating = null,
      review = "",
      image_url = "",
      genre,
    } = body;

    if (!film || !genre || !year || !tmdb_id) {
      return NextResponse.json(
        { error: 'Missing required fields: film, genre, year, tmdb_id' },
        { status: 400 }
      );
    }

    const sanitizedYear = Number(year);
    const sanitizedTmdbId = Number(tmdb_id);
    const sanitizedRunTime = run_time !== null ? Number(run_time) : null;

    if (
      isNaN(sanitizedYear) ||
      isNaN(sanitizedTmdbId) ||
      (run_time !== null && isNaN(sanitizedRunTime))
    ) {
      return NextResponse.json(
        { error: 'Invalid number for year, tmdb_id, or run_time' },
        { status: 400 }
      );
    }

    const genreSlug = slugifyGenre(genre);
    const genreTable = `${genreSlug}movies`;

    if (!/^[a-z0-9_]+$/.test(genreTable)) {
      return NextResponse.json(
        { error: 'Invalid genre table name' },
        { status: 400 }
      );
    }

    try {
      await sql.query(`SELECT 1 FROM ${genreTable} LIMIT 1;`);
    } catch {
      return NextResponse.json(
        { error: `Genre table '${genreTable}' does not exist.` },
        { status: 400 }
      );
    }

    const slugifiedUrl = `${genreSlug}/${slugify(film, sanitizedTmdbId)}`;
    const genreToStore = genre.trim();

    // check if exists by tmdb_id
    const existing = await sql.query(
      `SELECT 1 FROM ${genreTable} WHERE tmdb_id = $1 LIMIT 1;`,
      [sanitizedTmdbId]
    );

    if (existing.rows.length > 0) {
      return NextResponse.json(
        { message: 'Movie already exists' },
        { status: 200 }
      );
    }

    const insertQuery = `
      INSERT INTO ${genreTable} 
        (film, year, studio, director, screenwriters, producer, run_time, my_rating, review, url, image_url, genre, tmdb_id)
      VALUES 
        ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
    `;

    await sql.query(insertQuery, [
      film,
      sanitizedYear,
      studio,
      director,
      screenwriters,
      producer,
      sanitizedRunTime,
      my_rating,
      review,
      slugifiedUrl,
      image_url,
      genreToStore,
      sanitizedTmdbId
    ]);

    return NextResponse.json(
      { message: 'Movie inserted successfully' },
      { status: 201 }
    );

  } catch (error) {
    console.error('Insert failed:', error);
    return NextResponse.json(
      { error: 'Failed to insert movie' },
      { status: 500 }
    );
  }
}
