import { NextResponse } from 'next/server';
import { sql } from '@vercel/postgres';

// Slugify using TMDB ID for uniqueness
const slugify = (title, tmdb_id) => {
  return `${title}-${tmdb_id}`
    .toString()
    .toLowerCase()
    .replace(/'/g, "")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");
};

export async function POST(req) {
  try {
    const {
      title,
      year,
      tmdb_id,          // âœ… new required field
      director,
      screenwriters,
      producers,
      studios,
      run_time,
      genre,
    } = await req.json();

    // Validate required fields
    if (!title || !genre || !year || !tmdb_id) {
      return NextResponse.json({ error: 'Missing title, genre, year or tmdb_id' }, { status: 400 });
    }

    // Sanitize and construct genre table name
    const genreTable = `${genre.toLowerCase().replace(/\s+/g, '')}movies`;

    // Validate genreTable name
    if (!/^[a-z0-9_]+$/.test(genreTable)) {
      return NextResponse.json({ error: 'Invalid genre table name' }, { status: 400 });
    }

    // Check if genre table exists
    try {
      const checkTableExistsQuery = `SELECT 1 FROM ${genreTable} LIMIT 1;`;
      await sql.query(checkTableExistsQuery);
    } catch (err) {
      return NextResponse.json({ error: `Genre table '${genreTable}' does not exist.` }, { status: 400 });
    }

    // Generate slug from title and tmdb_id
    const slugifiedUrl = slugify(title, tmdb_id);

    // Check for duplicates
    const existingMoviesQuery = `SELECT * FROM ${genreTable} WHERE url = $1;`;
    const existing = await sql.query(existingMoviesQuery, [slugifiedUrl]);

    if (existing.rows.length > 0) {
      return NextResponse.json({ message: 'Movie already exists' }, { status: 200 });
    }

    // Insert new movie
    const insertQuery = `
      INSERT INTO ${genreTable} 
        (title, year, studios, director, screenwriters, producers, run_time, url)
      VALUES 
        ($1, $2, $3, $4, $5, $6, $7, $8)
    `;
    await sql.query(insertQuery, [
      title,
      year,
      studios,
      director,
      screenwriters,
      producers,
      run_time,
      slugifiedUrl,
    ]);

    return NextResponse.json({ message: 'Movie inserted successfully' }, { status: 201 });

  } catch (error) {
    console.error('Insert failed:', error);
    return NextResponse.json({ error: 'Failed to insert movie' }, { status: 500 });
  }
}
