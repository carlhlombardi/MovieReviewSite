import { sql } from '@vercel/postgres';
import { NextResponse } from 'next/server';

export async function POST(req) {
  try {
    let {
      film,
      year,
      tmdb_id,
      genre,
      director = "",
      screenwriters = "",
      producer = "",
      studio = "",
      run_time = null,
      url,
      image_url,
    } = await req.json();

    // üõë Required fields check
    if (!film || !year || !tmdb_id || !genre) {
      return NextResponse.json(
        { error: 'Missing required fields: film, year, tmdb_id, or genre' },
        { status: 400 }
      );
    }

    // üß™ Slugify helper
    const slugify = (title, tmdb_id) =>
      `${title}-${tmdb_id}`
        .toLowerCase()
        .replace(/'/g, "")
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-+|-+$/g, "");

    const genreSlug = genre.toString().toLowerCase().replace(/[^a-z0-9]+/g, "").trim();

    if (!url) {
      url = slugify(film, tmdb_id);
    }

    // üïµÔ∏è Check if movie already exists
    const existing = await sql.query(
      `SELECT 1 FROM allmovies WHERE url = $1 AND genre = $2`,
      [url, genreSlug]
    );

    if (existing.rows.length > 0) {
      return NextResponse.json({ message: 'Movie already exists' }, { status: 200 });
    }

    // üñºÔ∏è Fallback image if none provided
    if (!image_url) {
      image_url = '/images/fallback.jpg';
    }

    // üìù Insert
    await sql.query(
      `INSERT INTO allmovies 
        (film, year, studio, director, screenwriters, producer, run_time, url, image_url, tmdb_id, genre)
       VALUES 
        ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
       ON CONFLICT (tmdb_id, genre) DO UPDATE
        SET film=$1, year=$2, studio=$3, director=$4, screenwriters=$5,
            producer=$6, run_time=$7, url=$8, image_url=$9`,
      [film, year, studio, director, screenwriters, producer, run_time, url, image_url, tmdb_id, genreSlug]
    );

    return NextResponse.json({ message: 'Movie inserted successfully' }, { status: 201 });

  } catch (error) {
    console.error('‚ùå Insert failed:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
