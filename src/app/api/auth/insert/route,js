import { NextResponse } from 'next/server';
import { sql } from '@vercel/postgres';

// Helper: Slugify movie title and TMDB ID for unique URLs
const slugify = (title, tmdbId) => {
  return `${title}-${tmdbId}`
    .toString()
    .toLowerCase()
    .replace(/'/g, "")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");
};

// Helper: Slugify genre for table name and URLs
const slugifyGenre = (genre) => {
  return genre.toString().toLowerCase().replace(/[^a-z0-9]+/g, "").trim();
};

export async function POST(req) {
  try {
    const body = await req.json();
    console.log("Incoming POST data:", body);

    const {
      title,
      year,
      tmdb_id,
      director = "",
      screenwriters = "",
      producers = "",
      studios = "",
      run_time = null,
      genre,
    } = body;

    // Validate required fields
    if (!title || !genre || !year || !tmdb_id) {
      return NextResponse.json(
        { error: 'Missing required fields: title, genre, year, or tmdb_id' },
        { status: 400 }
      );
    }

    // Sanitize and validate numeric fields
    const sanitizedYear = Number(year);
    const sanitizedTmdbId = Number(tmdb_id);
    const sanitizedRunTime = run_time !== null ? Number(run_time) : null;

    if (
      isNaN(sanitizedYear) ||
      isNaN(sanitizedTmdbId) ||
      (run_time !== null && isNaN(sanitizedRunTime))
    ) {
      return NextResponse.json(
        { error: 'Invalid number for year, tmdb_id, or run_time' },
        { status: 400 }
      );
    }

    // Prepare genre slug and table name
    const genreSlug = slugifyGenre(genre);
    const genreTable = `${genreSlug}movies`;

    // Validate genre table name format (only a-z, 0-9, _)
    if (!/^[a-z0-9_]+$/.test(genreTable)) {
      return NextResponse.json(
        { error: 'Invalid genre table name' },
        { status: 400 }
      );
    }

    // Verify genre table exists
    try {
      await sql.query(`SELECT 1 FROM ${genreTable} LIMIT 1;`);
    } catch (err) {
      console.error("Genre table check error:", err);
      return NextResponse.json(
        { error: `Genre table '${genreTable}' does not exist.` },
        { status: 400 }
      );
    }

    // Generate slugified URL path
    const slugifiedUrl = `${genreSlug}/${slugify(title, sanitizedTmdbId)}`;
    
    // Trim and validate genre string to store
    const genreToStore = genre.trim();
    if (genreToStore.length === 0) {
      return NextResponse.json(
        { error: 'Genre cannot be an empty string' },
        { status: 400 }
      );
    }

    // Check if the movie already exists by URL
    const existing = await sql.query(
      `SELECT 1 FROM ${genreTable} WHERE url = $1 LIMIT 1;`,
      [slugifiedUrl]
    );

    if (existing.rows.length > 0) {
      return NextResponse.json(
        { message: 'Movie already exists' },
        { status: 200 }
      );
    }

    // Insert the new movie record
    const insertQuery = `
      INSERT INTO ${genreTable} 
        (title, year, studios, director, screenwriters, producers, run_time, url, genre)
      VALUES 
        ($1, $2, $3, $4, $5, $6, $7, $8, $9)
    `;

    await sql.query(insertQuery, [
      title,
      sanitizedYear,
      studios,
      director,
      screenwriters,
      producers,
      sanitizedRunTime,
      slugifiedUrl,
      genreToStore
    ]);

    return NextResponse.json(
      { message: 'Movie inserted successfully' },
      { status: 201 }
    );

  } catch (error) {
    console.error('Insert failed:', error);
    return NextResponse.json(
      { error: 'Failed to insert movie' },
      { status: 500 }
    );
  }
}
