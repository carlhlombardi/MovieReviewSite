import { NextResponse } from 'next/server';
import { sql } from '@vercel/postgres';

const slugify = (title, year) => {
  return `${title}-${year}`
    .toString()
    .toLowerCase()
    .replace(/'/g, "")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");
};

export async function POST(req) {
  try {
    const {
      title,
      year,
      director,
      screenwriters,
      producers,
      studios,
      run_time,
      genre,
      my_rating,
      review
    } = await req.json();

    if (!title || !genre || !year) {
      return NextResponse.json({ error: 'Missing title, genre or year' }, { status: 400 });
    }

    const genreTable = `${genre.toLowerCase().replace(/\s+/g, '')}movies`;

    if (!/^[a-z0-9_]+$/.test(genreTable)) {
      return NextResponse.json({ error: 'Invalid genre table name' }, { status: 400 });
    }

    try {
      const checkTableExistsQuery = `SELECT 1 FROM ${genreTable} LIMIT 1;`;
      await sql.query(checkTableExistsQuery);
    } catch (err) {
      return NextResponse.json({ error: `Genre table '${genreTable}' does not exist.` }, { status: 400 });
    }

    const slugifiedUrl = slugify(title, year);
    const yearInt = parseInt(year, 10);
    const runTimeInt = run_time ? parseInt(run_time, 10) : null;
    const ratingNum = my_rating ? parseFloat(my_rating) : null;

    const existingMoviesQuery = `SELECT * FROM ${genreTable} WHERE url = $1;`;
    const existing = await sql.query(existingMoviesQuery, [slugifiedUrl]);

    if (existing.rows.length > 0) {
      return NextResponse.json({ message: 'Movie already exists' }, { status: 200 });
    }

    const insertQuery = `
      INSERT INTO ${genreTable}
        (film, year, studios, director, screenwriters, producers, run_time, url, my_rating, review, genre)
      VALUES
        ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
    `;
    await sql.query(insertQuery, [
      title,
      yearInt,
      studios,
      director,
      screenwriters,
      producers,
      runTimeInt,
      slugifiedUrl,
      ratingNum,
      review,
      genre
    ]);

    return NextResponse.json({ message: 'Movie inserted successfully' }, { status: 201 });

  } catch (error) {
    console.error('Insert failed:', error);
    return NextResponse.json({ error: 'Failed to insert movie' }, { status: 500 });
  }
}
