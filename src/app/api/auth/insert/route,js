import { sql } from "@vercel/postgres";
import { NextResponse } from "next/server";

export async function POST(req) {
  try {
    // üì® Parse request
    let {
      film,
      year,
      tmdb_id,
      genre,
      director = "",
      screenwriters = "",
      producer = "",
      studio = "",
      run_time = null,
      url,
      image_url,
    } = await req.json();

    // üßº Normalize input
    film = (film || "").trim();
    genre = (genre || "").trim();
    const yearNum = Number(year);

    // üõ°Ô∏è Validate required fields
    if (!film || !genre || !tmdb_id || isNaN(yearNum)) {
      return NextResponse.json(
        {
          error: "Missing or invalid required fields",
          received: { film, year, tmdb_id, genre },
        },
        { status: 400 }
      );
    }

    // ü™Ñ Helper: slugify
    const slugify = (title, tmdbId) =>
      `${title}-${tmdbId}`
        .toLowerCase()
        .replace(/'/g, "")
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-+|-+$/g, "");

    // üè∑Ô∏è Normalize genre slug
    const genreSlug = genre.toLowerCase().replace(/[^a-z0-9]+/g, "").trim() || "misc";

    if (!url) url = slugify(film, tmdb_id);

    // ü™Ñ TMDB autofill (only if any key info missing)
    if (!image_url || !studio || !producer || !director || !screenwriters || !run_time) {
      try {
        const tmdbKey = process.env.TMDB_API_KEY;

        // üé¨ Fetch movie details
        const movieRes = await fetch(
          `https://api.themoviedb.org/3/movie/${tmdb_id}?api_key=${tmdbKey}`
        );
        if (!movieRes.ok) throw new Error("TMDB movie fetch failed");
        const movieData = await movieRes.json();

        // üë• Fetch credits
        const creditsRes = await fetch(
          `https://api.themoviedb.org/3/movie/${tmdb_id}/credits?api_key=${tmdbKey}`
        );
        if (!creditsRes.ok) throw new Error("TMDB credits fetch failed");
        const credits = await creditsRes.json();

        // üñºÔ∏è Poster image
        if (!image_url) {
          image_url = movieData.poster_path
            ? `https://image.tmdb.org/t/p/w500${movieData.poster_path}`
            : "/images/fallback.jpg";
        }

        // üè≠ Studio
        if (!studio) {
          studio =
            movieData.production_companies
              ?.map((c) => c.name)
              .filter(Boolean)
              .join(", ") || "";
        }

        // üë§ Producer(s)
        if (!producer) {
          producer =
            credits.crew
              ?.filter((p) => p.job === "Producer")
              .map((p) => p.name)
              .filter(Boolean)
              .join(", ") || "";
        }

        // üë® Director
        if (!director) {
          director = credits.crew?.find((p) => p.job === "Director")?.name || "";
        }

        // ‚úçÔ∏è Screenwriters
        if (!screenwriters) {
          screenwriters =
            credits.crew
              ?.filter((p) => ["Screenplay", "Writer"].includes(p.job))
              .map((p) => p.name)
              .filter(Boolean)
              .join(", ") || "";
        }

        // ‚è±Ô∏è Runtime
        if (!run_time) run_time = movieData.runtime || null;
      } catch (err) {
        console.error("‚ùå TMDB autofill failed:", err);
        if (!image_url) image_url = "/images/fallback.jpg";
      }
    }

    // üïµÔ∏è Check if movie already exists
    const existing = await sql.query(
      `SELECT id FROM allmovies WHERE tmdb_id = $1 AND genre = $2`,
      [tmdb_id, genreSlug]
    );

    if (existing.rows.length > 0) {
      return NextResponse.json({ message: "Movie already exists" }, { status: 200 });
    }

    // üìù Insert or update movie
    await sql.query(
      `INSERT INTO allmovies 
        (film, year, studio, director, screenwriters, producer, run_time, url, image_url, tmdb_id, genre)
       VALUES 
        ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
       ON CONFLICT (tmdb_id, genre) DO UPDATE
        SET film=$1, year=$2, studio=$3, director=$4, screenwriters=$5,
            producer=$6, run_time=$7, url=$8, image_url=$9`,
      [
        film,
        yearNum,
        studio,
        director,
        screenwriters,
        producer,
        run_time,
        url,
        image_url,
        tmdb_id,
        genreSlug,
      ]
    );

    return NextResponse.json({ message: "‚úÖ Movie inserted successfully" }, { status: 201 });
  } catch (error) {
    console.error("‚ùå Insert failed:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
