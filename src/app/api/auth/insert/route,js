export async function POST(req, { params }) {
  const genreSegment = params.genre.toLowerCase();

  if (!allowedTables.includes(genreSegment)) {
    return NextResponse.json({ error: 'Invalid genre' }, { status: 400 });
  }

  try {
    let {
      title,
      year,
      director = "",
      screenwriters = "",
      producers = "",
      studios = "",
      run_time = null,
      url,
      image_url,
      tmdb_id,
      genre,
    } = await req.json();

    if (!title || !year || !tmdb_id || !genre) {
      return NextResponse.json(
        { error: 'Missing required fields: title, year, tmdb_id, or genre' },
        { status: 400 }
      );
    }

    // Normalize studios
    if (Array.isArray(studios)) {
      studios = studios[0];
    } else if (typeof studios === 'string') {
      studios = studios.split(',')[0].trim();
    }

    // Normalize producers
    if (Array.isArray(producers)) {
      producers = producers[0];
    } else if (typeof producers === 'string') {
      producers = producers.split(',')[0].trim();
    }

    // Slugify URL
    const slugify = (title, tmdb_id) =>
      `${title}-${tmdb_id}`.toLowerCase()
        .replace(/'/g, "")
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-+|-+$/g, "");

    const genreSlug = genre.toString().toLowerCase().replace(/[^a-z0-9]+/g, "").trim();

    if (!url) {
      url = slugify(title, tmdb_id);
    }

    const existing = await sql.query(`SELECT 1 FROM ${genreSegment} WHERE url = $1`, [url]);
    if (existing.rows.length > 0) {
      return NextResponse.json({ message: 'Movie already exists' }, { status: 200 });
    }

    if (!image_url) {
      const fetchedImageUrl = await fetchTmdbPoster(title, year);
      if (fetchedImageUrl) image_url = fetchedImageUrl;
    }

    await sql.query(
  `INSERT INTO ${genreSegment} 
     (film, year, studio, director, screenwriters, producer, run_time, url, image_url, tmdb_id, genre)
   VALUES 
     ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)`,
  [title, year, studios, director, screenwriters, producers, run_time, url, image_url, tmdb_id, genreSlug]
);

// also insert into allmovies
await sql.query(
  `INSERT INTO allmovies 
     (film, year, studio, director, screenwriters, producer, run_time, url, image_url, tmdb_id, genre)
   VALUES 
     ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
   ON CONFLICT (tmdb_id, genre) DO UPDATE
     SET film=$1, year=$2, studio=$3, director=$4, screenwriters=$5,
         producer=$6, run_time=$7, url=$8, image_url=$9`,  // optional upsert
  [title, year, studios, director, screenwriters, producers, run_time, url, image_url, tmdb_id, genreSlug]
);

    return NextResponse.json({ message: 'Movie inserted successfully' }, { status: 201 });
  } catch (error) {
    console.error('Insert failed:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
